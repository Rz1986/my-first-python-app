name: Deploy to Alibaba Cloud ECS

on:
  push:
    branches: [ "main" ]
  workflow_dispatch: {}

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Print inputs
        run: |
          echo "HOST=${{ secrets.SSH_HOST }}"
          echo "USER=${{ secrets.SSH_USER }}"
          echo "PORT=${{ secrets.SSH_PORT }}"
          echo "APP_DIR=${{ secrets.APP_DIR }}"
          echo "SERVICE=${{ secrets.SERVICE_NAME }}"

      - name: Prepare SSH key & known_hosts
        shell: bash
        run: |
          set -euxo pipefail
          mkdir -p ~/.ssh
          printf "%s\n" "${{ secrets.SSH_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan -p "${{ secrets.SSH_PORT }}" "${{ secrets.SSH_HOST }}" >> ~/.ssh/known_hosts
          # 用 -vvv 打开超详细日志
          ssh -vvv -p "${{ secrets.SSH_PORT }}" -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=yes -o BatchMode=yes \
            "${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}" 'echo "SSH OK: $(hostname)" && whoami && uname -a'

      - name: Ensure app dir exists
        shell: bash
        run: |
          set -euxo pipefail
          ssh -p "${{ secrets.SSH_PORT }}" -i ~/.ssh/id_ed25519 "${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}" \
            "sudo mkdir -p '${{ secrets.APP_DIR }}' && sudo chown -R '${{ secrets.SSH_USER }}':'${{ secrets.SSH_USER }}' '${{ secrets.APP_DIR }}' && ls -la '${{ secrets.APP_DIR }}' || (echo 'Create/chown APP_DIR failed' && exit 1)"

      - name: Rsync project (verbose)
        shell: bash
        run: |
          set -euxo pipefail
          rsync -azvv --delete \
            --exclude ".git" --exclude ".github" --exclude ".venv" \
            -e "ssh -p ${{ secrets.SSH_PORT }} -i ~/.ssh/id_ed25519" \
            ./ "${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:${{ secrets.APP_DIR }}/"

      - name: Install deps & restart (capture logs)
        shell: bash
        run: |
          set -euxo pipefail
          ssh -p "${{ secrets.SSH_PORT }}" -i ~/.ssh/id_ed25519 "${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}" bash -lc '
            set -euxo pipefail
            cd "${{ secrets.APP_DIR }}"
            # venv
            [ -x .venv/bin/python ] || python3 -m venv .venv
            .venv/bin/pip install -U pip
            if [ -f requirements.txt ]; then
              .venv/bin/pip install -r requirements.txt
            else
              .venv/bin/pip install flask gunicorn
            fi
            echo "APP_VERSION=${GITHUB_SHA}" > .env
            # 重启服务；失败时打印最近日志并失败退出
            if ! sudo systemctl restart "${{ secrets.SERVICE_NAME }}"; then
              echo "==== systemd status (after failed restart) ===="
              sudo systemctl status "${{ secrets.SERVICE_NAME }}" -n 80 --no-pager || true
              echo "==== journal (tail) ===="
              sudo journalctl -u "${{ secrets.SERVICE_NAME }}" -n 200 --no-pager || true
              exit 1
            fi
            # 打印状态
            sudo systemctl status "${{ secrets.SERVICE_NAME }}" -n 20 --no-pager || true
            # 健康检查：直连后端端口
            if ! curl -fsSI http://127.0.0.1:5000; then
              echo "Backend health check failed, printing journal..."
              sudo journalctl -u "${{ secrets.SERVICE_NAME }}" -n 200 --no-pager || true
              exit 1
            fi
          '

      - name: Smoke test via Nginx (optional)
        shell: bash
        continue-on-error: true
        run: |
          set -euxo pipefail
          curl -I http://cici2.fun || true
